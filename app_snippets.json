{
	"Create DTO": {
		"prefix": "dto",
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${file_name}_dto.freezed.dart';",
			"part '${file_name}_dto.g.dart';",
			"",
			"@freezed",
			"class ${ClassName}Dto with _$${ClassName}Dto {",
			"  const factory ${ClassName}Dto({",
			"    required int id,",
			"    @Default('android') String platform,",
			"    ",
			"  }) = _${ClassName}Dto;",
			"",
			"  factory ${ClassName}Dto.fromJson(Map<String, dynamic> json) =>",
			"      _$${ClassName}DtoFromJson(json);",
			"}",
			""
		],
		"description": "Create DTO"
	},
	
	"Create Screen": {
		"prefix": "screen",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'viewmodel/${file_name}_viewmodel.dart';",
			"import '../../../core/viewmodel/widget/vm_screen.dart",
			"",
			"import 'package:flutter/widgets.dart';",
			"import 'package:flutter_bloc/flutter_bloc.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"import '../../../../core/viewmodel/viewmodel.dart';",
			"",
			"part '${file_name}_viewmodel.freezed.dart';",
			"",
			"@freezed",
			"class ${ScreenName}State with _$${ScreenName}State {",
			"  const factory ${ScreenName}State({",
			"    @Default(false) bool flag,",
			"  }) = _${ScreenName}State;",
			"}",
			"",
			"class ${ScreenName}ViewModel extends ViewModel<${ScreenName}State> {",
			"  static ${ScreenName}ViewModel of(BuildContext context) =>",
			"      context.read<${ScreenName}ViewModel>();",
			"",
			"  ${ScreenName}ViewModel() : super(const ${ScreenName}State()) {",
			"    _init();",
			"  }",
			"",
			"  Future<void> _init() async {}",
			"}",
			"",
			"class ${ScreenName}Screen extends StatelessWidget {",
			"  const ${ScreenName}Screen({super.key});",
			"  static Route<void> route() =>",
			"      MaterialPageRoute<void>(builder: (_) => const ${ScreenName}Screen());",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return VMScreen<${ScreenName}ViewModel, ${ScreenName}State>(",
			"      createViewModel: (context) => ${ScreenName}ViewModel(),",
			"      builder: (context, screenState, state) {",
			"        return const Scaffold(",
			"          body: Placeholder(),",
			"        );",
			"      },",
			"    );",
			"  }",
			"}"
		],
		"description": "Create Screen"
	}
}